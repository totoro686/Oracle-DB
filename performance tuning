4.	Optimization tips
This will help to optimize the performance of plsql/sql and also for ease maintenance of the code. 
a.)	Be aware of your tables’ expected content, data volume and use within the application.
Reason: Design your table properly by using primary key, constraint, index, partition to define your preferred access path when you use it.
b.)	Be careful of using the bind variable (PL/SQL variables, constants and parameters) because it could slow down your performance Use literal value if possible in OLAP environment. 
Reason: The optimizer will use bind variable peeking to generate the execution plan and if the data in table is skew this may cause a bad execution plan. To use literal value in the SQL can avoid this. Be notes, this is an OLAP environment, so time saving from getting the right/correct execution plan is much more compared to the hard parse. 
c.)	Use LIKE “%...” with caution
Try to avoid the pattern that begins with the wildcard character “%”.
Reason: If there is an index for this column, the statement using like “%..” will not be able to use the index.
d.)	Using BULK COLLECT whenever you need to put data in the ARRAY. 
Reason: This will help you gain better performance by avoiding too frequently engine switch. 
 
e.)	Always Close locally opened cursor
Reason: Any cursors left open can consume additional system Global Area memory space within the database instance, potentially in both the shared and private SQL pools. Furthermore, failure to explicitly close cursors may also cause the owning session to exceed its maximum limit of open cursors and trigger the Oracle Error “ORA-01000 maximum open cursors exceeded”. 
 
f.)	 Try to use CASE rather than DECODE
Reason: DECODE is an old function that has been replaced by the easier-to-understand and more common CASE function. 
g.)	 Try to use the function to implement the logic that is commonly 
used/shared.
This will help the developer to avoid writing the same logic again and again so will reduce the chance of making mistakes also reduce the development time. 
But using this kind of design ONLY in case the logic is COMMON and can be re-used because if not there are several flaws for this kind of design:
1. To the code readers, it makes the logic trace harder because it required developer to go through the code up and down to understand the logic so it waste lots of time to map the parameter and the real value when doing debug.
  2. To the code writer, it takes more time to do coding this way (if putting no-repeat logic that cannot be shared in this way).
3. Performance, although the function is in the package, it still requires some extra work compared to doing the logic directly.
 
h.)	Learn to use the WITH clause. 
WITH clause can be used to reduce repetition and simplify complex SQL statements. 
The advantage is that repeated references to the sub query may be more efficient as the data is easily retrieved from the temporary table, rather than being required by each reference. 
You should assess the performance implications of the WITH clause on a case-by-case basis, if the result set from the sub query is very large, it’s may be not a good idea to do so, the alternative is to create an intermediate table and store the data permanently for others to use.
Step 1. Use the WITH..AS to materialize the sub query result set
 
Step 2. Join it as a normal table 
 

5.	The usage of foreign keys
1. When creating foreign keys on a table, you must create an index on the foreign keys columns
2. Be careful when creating foreign keys , we shouldn't have loop dependency using foreign keys. 
A loop dependency example: 
Table A refer to Table B, and Table C refer to table B, also Table C refer to A 
A dead lock happen if we have loop dependency like this.
